service: cep-batch-3-a-33-casestudy-test
app: server-app

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: cognito-pool-cep-batch3-a33-admin-dev-test
  userPoolClientName: cognito-pool-cep-batch3-a33-admin-dev-client-test
  userPoolNameNormalUsers: cognito-pool-cep-batch3-a33-normal-user-dev-test
  userPoolNormalUsersClientName: cognito-pool-cep-batch3-a33-normal-user-dev-client-test
  bucketName: cep-batch-3-a33-resource-test

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 128
  region: us-east-1
  stage: ${self:custom.currentStage}
  tags:
    cep-batch-3: a33
  environment:
      bucketName: ${self:custom.bucketName}
  logRetentionInDays: 30
  timeout: 90
  iamRoleStatements:
  - Effect: Allow
    Action:
        - S3:*
        - SNS:Publish
    Resource: '*'
  vpc:
    securityGroupIds:
      - sg-d469ece7
    subnetIds:
      - subnet-57249c76
      - subnet-87c18cca
      - subnet-489c212e
      - subnet-15804024
      - subnet-8b9bec85
      - subnet-2547f97a
      
functions:
  postConfirmation:
    handler: handler.addUserToDB
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PostConfirmation
          existing: true
  preSignUp:
    handler: handler.verifyAdminUser
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PreSignUp
          existing: true
  
  getArticle:
    handler: handler.getArticle
    events:
     - http:
         path: article/{id}
         method: get
         authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
         cors:
            origin: 'http://localhost:4200'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
     - http:
         path: fetcharticle/{id}
         method: get
         authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizerNormal
         cors:
            origin: 'http://localhost:4200'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  getAllArticles:
    handler: handler.getAllArticles
    events:
     - http:
         path: articles
         method: get
         authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
#         cors:
#            origin: 'http://localhost:4200'
#            headers:
#              - Content-Type
#              - X-Amz-Date
#              - Authorization
#              - X-Api-Key
#              - X-Amz-Security-Token
#              - X-Amz-User-Agent
#            allowCredentials: true
     - http:
         path: fetcharticles
         method: get
         authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizerNormal

  
  createArticle:
    handler: handler.createArticles
    events:
      - http:
          path: article
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: 'http://localhost:4200'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
              
  updateArticle:
    handler: handler.updateArticle
    events:
      - http:
          path: article/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: 'http://localhost:4200'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          
  deleteArticle:
    handler: handler.deleteArticle
    events:
      - http:
          path: article/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: 'http://localhost:4200'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

resources:
  Resources:
    s3UploadBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: ${self:custom.bucketName}
            Tags:
              -
                Key: cep-batch-3
                Value: a33
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc connetion.
        Roles:
          - {"Ref" : "IamRoleLambdaExecution"}
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UserPoolTags:
          cep-batch-3: a33
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        Schema:
            - Name: email
              Required: true
              Mutable: true
            - Name: name
              Required: true
              Mutable: true
            - Name: family_name
              Required: true
              Mutable: true
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        LogoutURLs: [http://localhost:4200/signout]
        CallbackURLs: [http://localhost:4200/admin]
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: test-admin-cep-batch-3-a33 # what is before .auth.REGION.amazoncognito.com
        UserPoolId:
          Ref: CognitoUserPool # given the name of your resource
    CognitoUserPoolNormal:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolNameNormalUsers}
        UserPoolTags:
          cep-batch-3: a33
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        Schema:
            - Name: email
              Required: true
              Mutable: true
            - Name: name
              Required: true
              Mutable: true
            - Name: family_name
              Required: true
              Mutable: true
    CognitoUserPoolClientNormal:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolNormalUsersClientName}
        GenerateSecret: False
        LogoutURLs: [http://localhost:4200/signout]
        CallbackURLs: [http://localhost:4200/home]
        SupportedIdentityProviders:
        - COGNITO
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: CognitoUserPoolNormal
    ApiGatewayAuthorizerNormal:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer-normal
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPoolNormal, Arn]
    CognitoUserPoolDomainNormal:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: test-cep-batch-3-a33 # what is before .auth.REGION.amazoncognito.com
        UserPoolId:
          Ref: CognitoUserPoolNormal # given the name of your resource
  Outputs:
    CognitoUserPoolAdminArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolAdminTestArn-${self:custom.currentStage}
            
#plugins:
#  - serverless-offline
         
  
      
